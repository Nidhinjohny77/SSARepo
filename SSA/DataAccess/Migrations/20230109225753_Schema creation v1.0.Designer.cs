// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(SSDbContext))]
    [Migration("20230109225753_Schema creation v1.0")]
    partial class Schemacreationv10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Entities.Country", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyUID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("CurrencyUID");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "UK",
                            Continent = "Europe",
                            CurrencyUID = 2,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            UID = 2,
                            Code = "IND",
                            Continent = "Asia",
                            CurrencyUID = 1,
                            Name = "India"
                        },
                        new
                        {
                            UID = 3,
                            Code = "BAN",
                            Continent = "Asia",
                            CurrencyUID = 3,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            UID = 4,
                            Code = "SRL",
                            Continent = "Asia",
                            CurrencyUID = 4,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            UID = 5,
                            Code = "PAK",
                            Continent = "Asia",
                            CurrencyUID = 5,
                            Name = "Pakistan"
                        },
                        new
                        {
                            UID = 6,
                            Code = "CNA",
                            Continent = "Asia",
                            CurrencyUID = 6,
                            Name = "China"
                        },
                        new
                        {
                            UID = 7,
                            Code = "FRA",
                            Continent = "Europe",
                            CurrencyUID = 7,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Currency", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "INR",
                            Name = "Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 2,
                            Code = "GBP",
                            Name = "Pound",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 3,
                            Code = "BDT",
                            Name = "Bangladeshi Taka",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 4,
                            Code = "LKR",
                            Name = "Sri Lankan Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 5,
                            Code = "PKR",
                            Name = "Pakistani Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 6,
                            Code = "CNY",
                            Name = "Chinese Yuan",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 7,
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = ""
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.FileType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("FileType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Description = "this type is used for storing images.",
                            Name = "jpeg"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.FurnishType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("FurnishType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "FULL",
                            Description = "Fully Furnished"
                        },
                        new
                        {
                            UID = 2,
                            Code = "SEMI",
                            Description = "Semi Furnished"
                        },
                        new
                        {
                            UID = 3,
                            Code = "NF",
                            Description = "Non Furnished"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.ImageType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("ImageType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Name = "ThumbNail"
                        },
                        new
                        {
                            UID = 2,
                            Name = "Full"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<int>("ItemTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("ItemTypeUID");

                    b.ToTable("Item", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            ItemTypeUID = 1,
                            Name = "Study Chair"
                        },
                        new
                        {
                            UID = 2,
                            ItemTypeUID = 1,
                            Name = "Study Table"
                        },
                        new
                        {
                            UID = 3,
                            ItemTypeUID = 1,
                            Name = "Dining Table"
                        },
                        new
                        {
                            UID = 4,
                            ItemTypeUID = 1,
                            Name = "Dining Chair"
                        },
                        new
                        {
                            UID = 5,
                            ItemTypeUID = 1,
                            Name = "Couch"
                        },
                        new
                        {
                            UID = 6,
                            ItemTypeUID = 1,
                            Name = "Bed"
                        },
                        new
                        {
                            UID = 7,
                            ItemTypeUID = 1,
                            Name = "Cot"
                        },
                        new
                        {
                            UID = 8,
                            ItemTypeUID = 1,
                            Name = "TV Table"
                        },
                        new
                        {
                            UID = 9,
                            ItemTypeUID = 1,
                            Name = "Cup Board"
                        },
                        new
                        {
                            UID = 10,
                            ItemTypeUID = 2,
                            Name = "Bulb"
                        },
                        new
                        {
                            UID = 11,
                            ItemTypeUID = 2,
                            Name = "Electric Kettle"
                        },
                        new
                        {
                            UID = 12,
                            ItemTypeUID = 2,
                            Name = "Electric Hob"
                        },
                        new
                        {
                            UID = 13,
                            ItemTypeUID = 2,
                            Name = "Electric Oven"
                        },
                        new
                        {
                            UID = 14,
                            ItemTypeUID = 2,
                            Name = "Washing Machine"
                        },
                        new
                        {
                            UID = 15,
                            ItemTypeUID = 2,
                            Name = "Microwave"
                        },
                        new
                        {
                            UID = 16,
                            ItemTypeUID = 3,
                            Name = "Cooker"
                        },
                        new
                        {
                            UID = 17,
                            ItemTypeUID = 6,
                            Name = "Boiler"
                        },
                        new
                        {
                            UID = 18,
                            ItemTypeUID = 6,
                            Name = "Radiator"
                        },
                        new
                        {
                            UID = 19,
                            ItemTypeUID = 5,
                            Name = "Wash Sink"
                        },
                        new
                        {
                            UID = 20,
                            ItemTypeUID = 5,
                            Name = "Bath Tub"
                        },
                        new
                        {
                            UID = 21,
                            ItemTypeUID = 5,
                            Name = "Closet"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.ItemType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("ItemType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Description = "Furnitures available.",
                            Name = "Furniture"
                        },
                        new
                        {
                            UID = 2,
                            Description = "Electrical items available.",
                            Name = "Electrical"
                        },
                        new
                        {
                            UID = 3,
                            Description = "Equipments to deal the cooking gas.",
                            Name = "Gas Equipment"
                        },
                        new
                        {
                            UID = 4,
                            Description = "Kitchen utensils,sink.",
                            Name = "Kitchen"
                        },
                        new
                        {
                            UID = 5,
                            Description = "Bathroom fittings.",
                            Name = "Bathroom Fittings"
                        },
                        new
                        {
                            UID = 6,
                            Description = "Heating fittings.",
                            Name = "Heat Fittings"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Landlord", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID");

                    b.HasIndex("UserUID")
                        .IsUnique();

                    b.ToTable("Landlord", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "30ef617b-f8d2-44b3-88fa-929000313fdd",
                            Address = "46,Lothian Road, Middlesborough",
                            CountryUID = 1,
                            CreatedBy = "9135bf6a-0115-4164-a76c-0fa164fb2a44",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8859),
                            DOB = new DateTime(1988, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastUpdatedBy = "9135bf6a-0115-4164-a76c-0fa164fb2a44",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8860),
                            PhoneNumber = "07773636363",
                            UserUID = "9135bf6a-0115-4164-a76c-0fa164fb2a44"
                        },
                        new
                        {
                            UID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            Address = "34,Parliament Road, Middlesborough",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8900),
                            DOB = new DateTime(1994, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8902),
                            PhoneNumber = "07773636363",
                            UserUID = "fdb7de88-bed7-4370-b993-c382b3cc574a"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LandlordUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Ratings")
                        .HasColumnType("real");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID");

                    b.HasIndex("LandlordUID");

                    b.ToTable("Property", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "a37c1f36-4f04-427b-afab-076298bfd704",
                            Address = "Oxford Street, Middlesbrough TS1",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8919),
                            IsActive = true,
                            LandlordUID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8921),
                            Name = "House 1",
                            PostCode = "TS1 2HR",
                            Ratings = 0f
                        },
                        new
                        {
                            UID = "77382e87-4ba7-431f-8044-9711d538354d",
                            Address = "Kings Street, Middlesbrough TS2",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9007),
                            IsActive = true,
                            LandlordUID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9008),
                            Name = "House 2",
                            PostCode = "TS2 2HR",
                            Ratings = 0f
                        },
                        new
                        {
                            UID = "4f20da6d-9a89-45ad-95fd-f79efec152b3",
                            Address = "Numens Street, Middlesbrough TS3",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9059),
                            IsActive = true,
                            LandlordUID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9060),
                            Name = "House 3",
                            PostCode = "TS3 2HR",
                            Ratings = 0f
                        },
                        new
                        {
                            UID = "a367c899-d1a0-42f2-9316-2380263960d2",
                            Address = "Edward Pease Way, West Park Garden Village, Darlington",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9104),
                            IsActive = true,
                            LandlordUID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9106),
                            Name = "House 4",
                            PostCode = "DS4 2HR",
                            Ratings = 0f
                        },
                        new
                        {
                            UID = "7af92e80-a6b5-47a4-b54a-bc8280e151bc",
                            Address = "Bennard Street, Middlesbrough TS5",
                            CountryUID = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9149),
                            IsActive = true,
                            LandlordUID = "8c04bc83-7c11-46bf-ad3c-11d38ddcbb99",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9151),
                            Name = "House 5",
                            PostCode = "TS5 2HR",
                            Ratings = 0f
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyAttribute", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorCount")
                        .HasColumnType("int");

                    b.Property<int>("FurnishTypeUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBackyardAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGarageAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParkingSlotAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxOccupantCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingSlotCount")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("TotalAreaInSqFT")
                        .HasColumnType("real");

                    b.HasKey("UID");

                    b.HasIndex("PropertyTypeUID");

                    b.HasIndex("PropertyUID")
                        .IsUnique();

                    b.ToTable("PropertyAttribute", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "916ee67e-80e2-4bf7-a339-7736b085a0ea",
                            BathroomCount = 2,
                            BedroomCount = 4,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8927),
                            FloorCount = 2,
                            FurnishTypeUID = 1,
                            IsActive = true,
                            IsBackyardAvailable = true,
                            IsGarageAvailable = true,
                            IsParkingSlotAvailable = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8929),
                            MaxOccupantCount = 5,
                            ParkingSlotCount = 2,
                            PropertyTypeUID = 5,
                            PropertyUID = "a37c1f36-4f04-427b-afab-076298bfd704",
                            TotalAreaInSqFT = 1200f
                        },
                        new
                        {
                            UID = "bac3e894-e15c-4999-83fd-fbc51fb7aaf8",
                            BathroomCount = 2,
                            BedroomCount = 2,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9017),
                            FloorCount = 1,
                            FurnishTypeUID = 1,
                            IsActive = true,
                            IsBackyardAvailable = true,
                            IsGarageAvailable = true,
                            IsParkingSlotAvailable = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9018),
                            MaxOccupantCount = 3,
                            ParkingSlotCount = 1,
                            PropertyTypeUID = 5,
                            PropertyUID = "77382e87-4ba7-431f-8044-9711d538354d",
                            TotalAreaInSqFT = 700f
                        },
                        new
                        {
                            UID = "7140e4ec-fa20-4c51-835e-ec3886e58090",
                            BathroomCount = 1,
                            BedroomCount = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9065),
                            FloorCount = 1,
                            FurnishTypeUID = 1,
                            IsActive = true,
                            IsBackyardAvailable = true,
                            IsGarageAvailable = true,
                            IsParkingSlotAvailable = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9066),
                            MaxOccupantCount = 2,
                            ParkingSlotCount = 1,
                            PropertyTypeUID = 5,
                            PropertyUID = "4f20da6d-9a89-45ad-95fd-f79efec152b3",
                            TotalAreaInSqFT = 600f
                        },
                        new
                        {
                            UID = "5f154848-6248-4af8-842a-4bd732bb24d8",
                            BathroomCount = 3,
                            BedroomCount = 6,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9112),
                            FloorCount = 3,
                            FurnishTypeUID = 1,
                            IsActive = true,
                            IsBackyardAvailable = true,
                            IsGarageAvailable = true,
                            IsParkingSlotAvailable = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9113),
                            MaxOccupantCount = 12,
                            ParkingSlotCount = 3,
                            PropertyTypeUID = 5,
                            PropertyUID = "a367c899-d1a0-42f2-9316-2380263960d2",
                            TotalAreaInSqFT = 2600f
                        },
                        new
                        {
                            UID = "7c61a550-a5b3-4dee-9180-fec3af0eede5",
                            BathroomCount = 2,
                            BedroomCount = 4,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9155),
                            FloorCount = 2,
                            FurnishTypeUID = 1,
                            IsActive = true,
                            IsBackyardAvailable = true,
                            IsGarageAvailable = true,
                            IsParkingSlotAvailable = true,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9156),
                            MaxOccupantCount = 8,
                            ParkingSlotCount = 2,
                            PropertyTypeUID = 5,
                            PropertyUID = "7af92e80-a6b5-47a4-b54a-bc8280e151bc",
                            TotalAreaInSqFT = 2000f
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyImage", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeUID")
                        .HasColumnType("int");

                    b.Property<int>("ImageTypeUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("FileTypeUID");

                    b.HasIndex("ImageTypeUID");

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyImage", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCTIAvailableForSale")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListedByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListingAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyListing", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "270525d7-20e8-4fbe-9ad9-95a77ac88525",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8944),
                            Description = "4 bed terraced house to rent",
                            IsActive = true,
                            IsCTIAvailableForSale = false,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8945),
                            ListedByUser = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            ListingAmount = 2850.0,
                            ListingDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8938),
                            PropertyUID = "a37c1f36-4f04-427b-afab-076298bfd704"
                        },
                        new
                        {
                            UID = "2b6ce82e-5955-4314-8933-6f3a6a58aaf2",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9024),
                            Description = "2 BHK house to rent",
                            IsActive = true,
                            IsCTIAvailableForSale = false,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9025),
                            ListedByUser = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            ListingAmount = 1350.0,
                            ListingDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9022),
                            PropertyUID = "77382e87-4ba7-431f-8044-9711d538354d"
                        },
                        new
                        {
                            UID = "7a402a0d-9a7f-42d8-a2c6-fbaaf001c2dd",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9071),
                            Description = "1 BHK Appartmet to rent",
                            IsActive = true,
                            IsCTIAvailableForSale = false,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9072),
                            ListedByUser = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            ListingAmount = 1250.0,
                            ListingDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9069),
                            PropertyUID = "4f20da6d-9a89-45ad-95fd-f79efec152b3"
                        },
                        new
                        {
                            UID = "f4517879-4cf4-4faa-9c9e-5725d3d83597",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9118),
                            Description = "The Orchard at West Park",
                            IsActive = true,
                            IsCTIAvailableForSale = false,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9119),
                            ListedByUser = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            ListingAmount = 2950.0,
                            ListingDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9116),
                            PropertyUID = "a367c899-d1a0-42f2-9316-2380263960d2"
                        },
                        new
                        {
                            UID = "37b39025-c0d5-4add-b5d7-ac53f59fac49",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9161),
                            Description = "4 bed terraced house to rent",
                            IsActive = true,
                            IsCTIAvailableForSale = false,
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9162),
                            ListedByUser = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            ListingAmount = 1850.0,
                            ListingDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9159),
                            PropertyUID = "7af92e80-a6b5-47a4-b54a-bc8280e151bc"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListingAttribute", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AllowedOccupantCount")
                        .HasColumnType("int");

                    b.Property<int>("AvailableBathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("AvailableBedroomCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AvailableParkingSlots")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChildrenAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParkingAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartyingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudentFriendly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnisex")
                        .HasColumnType("bit");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyAttributeUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenancyTypeUID")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("PropertyAttributeUID");

                    b.HasIndex("PropertyListingUID")
                        .IsUnique();

                    b.HasIndex("TenancyTypeUID")
                        .IsUnique();

                    b.ToTable("PropertyListingAttribute", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "8add2f82-5dc3-4a16-9e4f-68cc6e736c3c",
                            AllowedOccupantCount = 5,
                            AvailableBathroomCount = 2,
                            AvailableBedroomCount = 4,
                            AvailableDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableParkingSlots = 2,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8953),
                            IsActive = true,
                            IsChildrenAllowed = true,
                            IsNew = true,
                            IsParkingAvailable = true,
                            IsPartyingAllowed = true,
                            IsPetsAllowed = true,
                            IsSharingAllowed = true,
                            IsSmokingAllowed = true,
                            IsStudentFriendly = true,
                            IsUnisex = true,
                            Landmark = "0.5 miles Middlesbrough",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8954),
                            PropertyAttributeUID = "916ee67e-80e2-4bf7-a339-7736b085a0ea",
                            PropertyListingUID = "270525d7-20e8-4fbe-9ad9-95a77ac88525",
                            TenancyTypeUID = 10
                        },
                        new
                        {
                            UID = "8fd50323-e236-4cfd-a0f7-a92107feb054",
                            AllowedOccupantCount = 3,
                            AvailableBathroomCount = 2,
                            AvailableBedroomCount = 2,
                            AvailableDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableParkingSlots = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9032),
                            IsActive = true,
                            IsChildrenAllowed = true,
                            IsNew = false,
                            IsParkingAvailable = true,
                            IsPartyingAllowed = true,
                            IsPetsAllowed = true,
                            IsSharingAllowed = true,
                            IsSmokingAllowed = true,
                            IsStudentFriendly = true,
                            IsUnisex = true,
                            Landmark = "0.5 miles Middlesbrough",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9033),
                            PropertyAttributeUID = "bac3e894-e15c-4999-83fd-fbc51fb7aaf8",
                            PropertyListingUID = "2b6ce82e-5955-4314-8933-6f3a6a58aaf2",
                            TenancyTypeUID = 10
                        },
                        new
                        {
                            UID = "48c035de-5a41-42d8-a431-b373f8dd82a1",
                            AllowedOccupantCount = 2,
                            AvailableBathroomCount = 1,
                            AvailableBedroomCount = 1,
                            AvailableDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableParkingSlots = 1,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9077),
                            IsActive = true,
                            IsChildrenAllowed = true,
                            IsNew = false,
                            IsParkingAvailable = true,
                            IsPartyingAllowed = true,
                            IsPetsAllowed = true,
                            IsSharingAllowed = true,
                            IsSmokingAllowed = true,
                            IsStudentFriendly = true,
                            IsUnisex = true,
                            Landmark = "0.5 miles Middlesbrough",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9078),
                            PropertyAttributeUID = "7140e4ec-fa20-4c51-835e-ec3886e58090",
                            PropertyListingUID = "7a402a0d-9a7f-42d8-a2c6-fbaaf001c2dd",
                            TenancyTypeUID = 10
                        },
                        new
                        {
                            UID = "79dbb489-b398-4289-9790-b7cda054aa7f",
                            AllowedOccupantCount = 12,
                            AvailableBathroomCount = 3,
                            AvailableBedroomCount = 6,
                            AvailableDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableParkingSlots = 3,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9123),
                            IsActive = true,
                            IsChildrenAllowed = true,
                            IsNew = true,
                            IsParkingAvailable = true,
                            IsPartyingAllowed = true,
                            IsPetsAllowed = true,
                            IsSharingAllowed = true,
                            IsSmokingAllowed = true,
                            IsStudentFriendly = false,
                            IsUnisex = true,
                            Landmark = "0.5 miles Middlesbrough",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9125),
                            PropertyAttributeUID = "5f154848-6248-4af8-842a-4bd732bb24d8",
                            PropertyListingUID = "f4517879-4cf4-4faa-9c9e-5725d3d83597",
                            TenancyTypeUID = 10
                        },
                        new
                        {
                            UID = "a3bbb0c7-0e61-47b7-877d-ee523a76236f",
                            AllowedOccupantCount = 12,
                            AvailableBathroomCount = 2,
                            AvailableBedroomCount = 4,
                            AvailableDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableParkingSlots = 2,
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9167),
                            IsActive = true,
                            IsChildrenAllowed = true,
                            IsNew = true,
                            IsParkingAvailable = true,
                            IsPartyingAllowed = true,
                            IsPetsAllowed = true,
                            IsSharingAllowed = true,
                            IsSmokingAllowed = true,
                            IsStudentFriendly = true,
                            IsUnisex = true,
                            Landmark = "0.5 miles Middlesbrough",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(9168),
                            PropertyAttributeUID = "7c61a550-a5b3-4dee-9180-fec3af0eede5",
                            PropertyListingUID = "37b39025-c0d5-4add-b5d7-ac53f59fac49",
                            TenancyTypeUID = 10
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyRenting", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AdvanceAmount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("RentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("RentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentPaymentFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyListingUID");

                    b.HasIndex("TenantUID");

                    b.ToTable("PropertyRenting", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyReview", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyReview", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("PropertyType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "FLT",
                            Description = "Flat"
                        },
                        new
                        {
                            UID = 2,
                            Code = "HSTL",
                            Description = "Hostel"
                        },
                        new
                        {
                            UID = 3,
                            Code = "PG",
                            Description = "Paying Guest"
                        },
                        new
                        {
                            UID = 4,
                            Code = "HSO",
                            Description = "House in Single Occupancy"
                        },
                        new
                        {
                            UID = 5,
                            Code = "HMO",
                            Description = "House in Multiple Occupancy"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyViewing", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyListingUID");

                    b.HasIndex("TenantUID");

                    b.ToTable("PropertyViewing", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            UID = 2,
                            Name = "Student"
                        },
                        new
                        {
                            UID = 3,
                            Name = "Landlord"
                        },
                        new
                        {
                            UID = 4,
                            Name = "University"
                        },
                        new
                        {
                            UID = 5,
                            Name = "Consultant"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.StudentProfile", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CourseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrolledCourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentSecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UniversityStudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityUID")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("TenantUID")
                        .IsUnique();

                    b.HasIndex("UniversityUID")
                        .IsUnique();

                    b.ToTable("StudentProfile", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.TenancyType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("TenancyType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Description = "Student Bachelor"
                        },
                        new
                        {
                            UID = 2,
                            Description = "Student Married Couple"
                        },
                        new
                        {
                            UID = 3,
                            Description = "Student UnMarried Couple"
                        },
                        new
                        {
                            UID = 4,
                            Description = "Student Married Couple With Children"
                        },
                        new
                        {
                            UID = 5,
                            Description = "Student UnMarried Couple With Children"
                        },
                        new
                        {
                            UID = 6,
                            Description = "Married Couple"
                        },
                        new
                        {
                            UID = 7,
                            Description = "UnMarried Couple"
                        },
                        new
                        {
                            UID = 8,
                            Description = "Married Couple With Children"
                        },
                        new
                        {
                            UID = 9,
                            Description = "UnMarried Couple With Children"
                        },
                        new
                        {
                            UID = 10,
                            Description = "Any"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenancyTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("UserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID")
                        .IsUnique();

                    b.HasIndex("TenancyTypeUID")
                        .IsUnique();

                    b.HasIndex("UserUID")
                        .IsUnique();

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.TenantItem", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemUID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyRentingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UID");

                    b.HasIndex("CurrencyUID")
                        .IsUnique();

                    b.HasIndex("ItemUID")
                        .IsUnique();

                    b.HasIndex("PropertyRentingUID");

                    b.ToTable("TenantItem", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.TenantPreference", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EndRangeAmount")
                        .HasColumnType("float");

                    b.Property<int>("FurnishTypeUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAttachedBathroomPrefered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRentIncludingBillsPrefered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSharingPrefered")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PreferedBathRoomCount")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedBedRoomCount")
                        .HasColumnType("int");

                    b.Property<string>("PreferedLocations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferedOccupantCount")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedTenancyPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedTenancyTypeUID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeUID")
                        .HasColumnType("int");

                    b.Property<double?>("StartRangeAmount")
                        .HasColumnType("float");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("FurnishTypeUID")
                        .IsUnique();

                    b.HasIndex("PropertyTypeUID")
                        .IsUnique();

                    b.HasIndex("TenantUID")
                        .IsUnique();

                    b.ToTable("TenantPreference", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.University", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<string>("UniversityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID");

                    b.ToTable("University", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Address = "Tees Valley,Middlesbrough,England",
                            ContactEmail = "tees.uni@gmail.com",
                            ContactNumber = "7464647464",
                            CountryUID = 1,
                            IsActive = true,
                            Name = "Teeside University",
                            Ratings = 3,
                            UniversityCode = "UNITEES"
                        },
                        new
                        {
                            UID = 2,
                            Address = "Ediburgh,Scotland",
                            ContactEmail = "universityofedinburgh.uni@gmail.com",
                            ContactNumber = "7334647464",
                            CountryUID = 1,
                            IsActive = true,
                            Name = "University of Edinburgh",
                            Ratings = 5,
                            UniversityCode = "UNIEDIN"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleUID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("RoleUID");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UID = "97fe4c93-9ba6-486e-8d1e-a2ca2a20c446",
                            CreatedBy = "97fe4c93-9ba6-486e-8d1e-a2ca2a20c446",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8667),
                            Email = "nidhin.sde@gmail.com",
                            FirstName = "Nidhin",
                            IsActive = true,
                            LastName = "Johny",
                            LastUpdatedBy = "97fe4c93-9ba6-486e-8d1e-a2ca2a20c446",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8702),
                            Password = "johny",
                            RoleUID = 2,
                            UserName = "nidhin",
                            UserType = 0
                        },
                        new
                        {
                            UID = "9135bf6a-0115-4164-a76c-0fa164fb2a44",
                            CreatedBy = "9135bf6a-0115-4164-a76c-0fa164fb2a44",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8759),
                            Email = "nora.sde@gmail.com",
                            FirstName = "Nora",
                            IsActive = true,
                            LastName = "Tom",
                            LastUpdatedBy = "9135bf6a-0115-4164-a76c-0fa164fb2a44",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8760),
                            Password = "rege",
                            RoleUID = 3,
                            UserName = "nora",
                            UserType = 0
                        },
                        new
                        {
                            UID = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            CreatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8888),
                            Email = "renjith.sde@gmail.com",
                            FirstName = "Renjith",
                            IsActive = true,
                            LastName = "M",
                            LastUpdatedBy = "fdb7de88-bed7-4370-b993-c382b3cc574a",
                            LastUpdatedDate = new DateTime(2023, 1, 9, 22, 57, 53, 199, DateTimeKind.Local).AddTicks(8889),
                            Password = "rege",
                            RoleUID = 3,
                            UserName = "renjith",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Country", b =>
                {
                    b.HasOne("DataAccess.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("DataAccess.Entities.Landlord", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Landlord", "UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Landlord", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyAttribute", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Property", "Property")
                        .WithOne("PropertyAttribute")
                        .HasForeignKey("DataAccess.Entities.PropertyAttribute", "PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyImage", b =>
                {
                    b.HasOne("DataAccess.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ImageType", "ImageType")
                        .WithMany()
                        .HasForeignKey("ImageTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("ImageType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.HasOne("DataAccess.Entities.Property", "Property")
                        .WithMany("Listings")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListingAttribute", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyAttribute", "PropertyAttribute")
                        .WithMany()
                        .HasForeignKey("PropertyAttributeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithOne("PropertyListingAttribute")
                        .HasForeignKey("DataAccess.Entities.PropertyListingAttribute", "PropertyListingUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TenancyType", "TenancyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.PropertyListingAttribute", "TenancyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyAttribute");

                    b.Navigation("PropertyListing");

                    b.Navigation("TenancyType");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyRenting", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithMany("Rentings")
                        .HasForeignKey("PropertyListingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyListing");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyReview", b =>
                {
                    b.HasOne("DataAccess.Entities.Property", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyViewing", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithMany("Viewings")
                        .HasForeignKey("PropertyListingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithMany("Viewings")
                        .HasForeignKey("TenantUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyListing");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.StudentProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.StudentProfile", "TenantUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.University", "University")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.StudentProfile", "UniversityUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("University");
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "CountryUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TenancyType", "TenancyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "TenancyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TenancyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.TenantItem", b =>
                {
                    b.HasOne("DataAccess.Entities.Currency", "Currency")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantItem", "CurrencyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantItem", "ItemUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyRenting", "PropertyRenting")
                        .WithMany()
                        .HasForeignKey("PropertyRentingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("PropertyRenting");
                });

            modelBuilder.Entity("DataAccess.Entities.TenantPreference", b =>
                {
                    b.HasOne("DataAccess.Entities.FurnishType", "FurnishType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "FurnishTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyType", "PropertyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "PropertyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "TenantUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FurnishType");

                    b.Navigation("PropertyType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.University", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Listings");

                    b.Navigation("PropertyAttribute")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.Navigation("PropertyListingAttribute")
                        .IsRequired();

                    b.Navigation("Rentings");

                    b.Navigation("Viewings");
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.Navigation("Viewings");
                });
#pragma warning restore 612, 618
        }
    }
}
