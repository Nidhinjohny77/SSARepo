// <auto-generated />
using System;
using DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(SSDbContext))]
    [Migration("20221229162552_Schema-Update-v1")]
    partial class SchemaUpdatev1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Entities.Country", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyUID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("CurrencyUID");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "UK",
                            Continent = "Europe",
                            CurrencyUID = 2,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            UID = 2,
                            Code = "IND",
                            Continent = "Asia",
                            CurrencyUID = 1,
                            Name = "India"
                        },
                        new
                        {
                            UID = 3,
                            Code = "BAN",
                            Continent = "Asia",
                            CurrencyUID = 3,
                            Name = "Bangladesh"
                        },
                        new
                        {
                            UID = 4,
                            Code = "SRL",
                            Continent = "Asia",
                            CurrencyUID = 4,
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            UID = 5,
                            Code = "PAK",
                            Continent = "Asia",
                            CurrencyUID = 5,
                            Name = "Pakistan"
                        },
                        new
                        {
                            UID = 6,
                            Code = "CNA",
                            Continent = "Asia",
                            CurrencyUID = 6,
                            Name = "China"
                        },
                        new
                        {
                            UID = 7,
                            Code = "FRA",
                            Continent = "Europe",
                            CurrencyUID = 7,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Currency", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Currency", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "INR",
                            Name = "Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 2,
                            Code = "GBP",
                            Name = "Pound",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 3,
                            Code = "BDT",
                            Name = "Bangladeshi Taka",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 4,
                            Code = "LKR",
                            Name = "Sri Lankan Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 5,
                            Code = "PKR",
                            Name = "Pakistani Rupee",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 6,
                            Code = "CNY",
                            Name = "Chinese Yuan",
                            Symbol = ""
                        },
                        new
                        {
                            UID = 7,
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = ""
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.CurrentTenantItem", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemUID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyRentingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UID");

                    b.HasIndex("CurrencyUID")
                        .IsUnique();

                    b.HasIndex("ItemUID")
                        .IsUnique();

                    b.HasIndex("PropertyRentingUID");

                    b.ToTable("CurrentTenantItem", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.FurnishType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("FurnishType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "FULL",
                            Description = "Fully Furnished"
                        },
                        new
                        {
                            UID = 2,
                            Code = "SEMI",
                            Description = "Semi Furnished"
                        },
                        new
                        {
                            UID = 3,
                            Code = "NF",
                            Description = "Non Furnished"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.ImageFile", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("ImageFile", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<int>("ItemTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("ItemTypeUID");

                    b.ToTable("Item", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            ItemTypeUID = 1,
                            Name = "Study Chair"
                        },
                        new
                        {
                            UID = 2,
                            ItemTypeUID = 1,
                            Name = "Study Table"
                        },
                        new
                        {
                            UID = 3,
                            ItemTypeUID = 1,
                            Name = "Dining Table"
                        },
                        new
                        {
                            UID = 4,
                            ItemTypeUID = 1,
                            Name = "Dining Chair"
                        },
                        new
                        {
                            UID = 5,
                            ItemTypeUID = 1,
                            Name = "Couch"
                        },
                        new
                        {
                            UID = 6,
                            ItemTypeUID = 1,
                            Name = "Bed"
                        },
                        new
                        {
                            UID = 7,
                            ItemTypeUID = 1,
                            Name = "Cot"
                        },
                        new
                        {
                            UID = 8,
                            ItemTypeUID = 1,
                            Name = "TV Table"
                        },
                        new
                        {
                            UID = 9,
                            ItemTypeUID = 1,
                            Name = "Cup Board"
                        },
                        new
                        {
                            UID = 10,
                            ItemTypeUID = 2,
                            Name = "Bulb"
                        },
                        new
                        {
                            UID = 11,
                            ItemTypeUID = 2,
                            Name = "Electric Kettle"
                        },
                        new
                        {
                            UID = 12,
                            ItemTypeUID = 2,
                            Name = "Electric Hob"
                        },
                        new
                        {
                            UID = 13,
                            ItemTypeUID = 2,
                            Name = "Electric Oven"
                        },
                        new
                        {
                            UID = 14,
                            ItemTypeUID = 2,
                            Name = "Washing Machine"
                        },
                        new
                        {
                            UID = 15,
                            ItemTypeUID = 2,
                            Name = "Microwave"
                        },
                        new
                        {
                            UID = 16,
                            ItemTypeUID = 3,
                            Name = "Cooker"
                        },
                        new
                        {
                            UID = 17,
                            ItemTypeUID = 6,
                            Name = "Boiler"
                        },
                        new
                        {
                            UID = 18,
                            ItemTypeUID = 6,
                            Name = "Radiator"
                        },
                        new
                        {
                            UID = 19,
                            ItemTypeUID = 5,
                            Name = "Wash Sink"
                        },
                        new
                        {
                            UID = 20,
                            ItemTypeUID = 5,
                            Name = "Bath Tub"
                        },
                        new
                        {
                            UID = 21,
                            ItemTypeUID = 5,
                            Name = "Closet"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.ItemType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("ItemType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Description = "Furnitures available.",
                            Name = "Furniture"
                        },
                        new
                        {
                            UID = 2,
                            Description = "Electrical items available.",
                            Name = "Electrical"
                        },
                        new
                        {
                            UID = 3,
                            Description = "Equipments to deal the cooking gas.",
                            Name = "Gas Equipment"
                        },
                        new
                        {
                            UID = 4,
                            Description = "Kitchen utensils,sink.",
                            Name = "Kitchen"
                        },
                        new
                        {
                            UID = 5,
                            Description = "Bathroom fittings.",
                            Name = "Bathroom Fittings"
                        },
                        new
                        {
                            UID = 6,
                            Description = "Heating fittings.",
                            Name = "Heat Fittings"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Landlord", b =>
                {
                    b.Property<string>("ProfileUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileUID");

                    b.HasIndex("UserUID")
                        .IsUnique();

                    b.ToTable("Landlord", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LandlordProfileUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Ratings")
                        .HasColumnType("real");

                    b.HasKey("UID");

                    b.HasIndex("LandlordProfileUID")
                        .IsUnique();

                    b.ToTable("Property", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyAttribute", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorCount")
                        .HasColumnType("int");

                    b.Property<int>("FurnishTypeUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBackyardAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGarageAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParkingSlotAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxOccupantCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingSlotCount")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("TotalAreaInSqFT")
                        .HasColumnType("real");

                    b.HasKey("UID");

                    b.HasIndex("FurnishTypeUID")
                        .IsUnique();

                    b.HasIndex("PropertyTypeUID")
                        .IsUnique();

                    b.HasIndex("PropertyUID")
                        .IsUnique();

                    b.ToTable("PropertyAttribute", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyImage", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageFileUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("ImageFileUID")
                        .IsUnique();

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyImage", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCTIAvailableForSale")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Listedby")
                        .HasColumnType("int");

                    b.Property<double>("ListingAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingStatus")
                        .HasColumnType("int");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyListing", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListingAttribute", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AllowedOccupantCount")
                        .HasColumnType("int");

                    b.Property<int>("AvailableBathroomCount")
                        .HasColumnType("int");

                    b.Property<int>("AvailableBedroomCount")
                        .HasColumnType("int");

                    b.Property<int?>("AvailableParkingSlots")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChildrenAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParkingAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartyingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnisex")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyAttributeUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenancyTypeUID")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("PropertyAttributeUID");

                    b.HasIndex("PropertyListingUID")
                        .IsUnique();

                    b.HasIndex("TenancyTypeUID")
                        .IsUnique();

                    b.ToTable("PropertyListingAttribute", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyRenting", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AdvanceAmount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("RentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("RentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentPaymentFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyListingUID");

                    b.HasIndex("TenantUID");

                    b.ToTable("PropertyRenting", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyReview", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewRating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyUID");

                    b.ToTable("PropertyReview", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("PropertyType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Code = "FLT",
                            Description = "Flat"
                        },
                        new
                        {
                            UID = 2,
                            Code = "HSTL",
                            Description = "Hostel"
                        },
                        new
                        {
                            UID = 3,
                            Code = "PG",
                            Description = "Paying Guest"
                        },
                        new
                        {
                            UID = 4,
                            Code = "HSO",
                            Description = "House in Single Occupancy"
                        },
                        new
                        {
                            UID = 5,
                            Code = "HMO",
                            Description = "House in Multiple Occupancy"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyViewing", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyListingUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("PropertyListingUID");

                    b.HasIndex("TenantUID");

                    b.ToTable("PropertyViewing", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            UID = 2,
                            Name = "Student"
                        },
                        new
                        {
                            UID = 3,
                            Name = "Landlord"
                        },
                        new
                        {
                            UID = 4,
                            Name = "University"
                        },
                        new
                        {
                            UID = 5,
                            Name = "Consultant"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.StudentProfile", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CourseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrolledCourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentSecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UniversityStudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityUID")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("TenantUID")
                        .IsUnique();

                    b.HasIndex("UniversityUID")
                        .IsUnique();

                    b.ToTable("StudentProfile", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.TenancyType", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.ToTable("TenancyType", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Description = "Student Bachelor"
                        },
                        new
                        {
                            UID = 2,
                            Description = "Student Married Couple"
                        },
                        new
                        {
                            UID = 3,
                            Description = "Student UnMarried Couple"
                        },
                        new
                        {
                            UID = 4,
                            Description = "Student Married Couple With Children"
                        },
                        new
                        {
                            UID = 5,
                            Description = "Student UnMarried Couple With Children"
                        },
                        new
                        {
                            UID = 6,
                            Description = "Married Couple"
                        },
                        new
                        {
                            UID = 7,
                            Description = "UnMarried Couple"
                        },
                        new
                        {
                            UID = 8,
                            Description = "Married Couple With Children"
                        },
                        new
                        {
                            UID = 9,
                            Description = "UnMarried Couple With Children"
                        },
                        new
                        {
                            UID = 10,
                            Description = "Any"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenancyTypeUID")
                        .HasColumnType("int");

                    b.Property<string>("UserUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID")
                        .IsUnique();

                    b.HasIndex("TenancyTypeUID")
                        .IsUnique();

                    b.HasIndex("UserUID")
                        .IsUnique();

                    b.ToTable("Tenant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.TenantPreference", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EndRangeAmount")
                        .HasColumnType("float");

                    b.Property<int>("FurnishTypeUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAttachedBathroomPrefered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRentIncludingBillsPrefered")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSharingPrefered")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PreferedBathRoomCount")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedBedRoomCount")
                        .HasColumnType("int");

                    b.Property<string>("PreferedLocations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreferedOccupantCount")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedTenancyPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int?>("PreferedTenancyTypeUID")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeUID")
                        .HasColumnType("int");

                    b.Property<double?>("StartRangeAmount")
                        .HasColumnType("float");

                    b.Property<string>("TenantUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UID");

                    b.HasIndex("FurnishTypeUID")
                        .IsUnique();

                    b.HasIndex("PropertyTypeUID")
                        .IsUnique();

                    b.HasIndex("TenantUID")
                        .IsUnique();

                    b.ToTable("TenantPreference", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.University", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryUID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<string>("UniversityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UID");

                    b.HasIndex("CountryUID");

                    b.ToTable("University", (string)null);

                    b.HasData(
                        new
                        {
                            UID = 1,
                            Address = "Tees Valley,Middlesbrough,England",
                            ContactEmail = "tees.uni@gmail.com",
                            ContactNumber = "7464647464",
                            CountryUID = 1,
                            IsActive = true,
                            Name = "Teeside University",
                            Ratings = 3,
                            UniversityCode = "UNITEES"
                        },
                        new
                        {
                            UID = 2,
                            Address = "Ediburgh,Scotland",
                            ContactEmail = "universityofedinburgh.uni@gmail.com",
                            ContactNumber = "7334647464",
                            CountryUID = 1,
                            IsActive = true,
                            Name = "University of Edinburgh",
                            Ratings = 5,
                            UniversityCode = "UNIEDIN"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleUID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.HasIndex("RoleUID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Country", b =>
                {
                    b.HasOne("DataAccess.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataAccess.Entities.CurrentTenantItem", b =>
                {
                    b.HasOne("DataAccess.Entities.Currency", "Currency")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.CurrentTenantItem", "CurrencyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.CurrentTenantItem", "ItemUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyRenting", "PropertyRenting")
                        .WithMany()
                        .HasForeignKey("PropertyRentingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Item");

                    b.Navigation("PropertyRenting");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("DataAccess.Entities.Landlord", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Landlord", "UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.HasOne("DataAccess.Entities.Landlord", "Landlord")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Property", "LandlordProfileUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyAttribute", b =>
                {
                    b.HasOne("DataAccess.Entities.FurnishType", "FurnishType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.PropertyAttribute", "FurnishTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyType", "PropertyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.PropertyAttribute", "PropertyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Property", "Property")
                        .WithOne("PropertyAttribute")
                        .HasForeignKey("DataAccess.Entities.PropertyAttribute", "PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FurnishType");

                    b.Navigation("Property");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyImage", b =>
                {
                    b.HasOne("DataAccess.Entities.ImageFile", "ImageFile")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.PropertyImage", "ImageFileUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Property", null)
                        .WithMany("Images")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.HasOne("DataAccess.Entities.Property", "Property")
                        .WithMany("Listings")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListingAttribute", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyAttribute", "PropertyAttribute")
                        .WithMany()
                        .HasForeignKey("PropertyAttributeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithOne("PropertyListingAttribute")
                        .HasForeignKey("DataAccess.Entities.PropertyListingAttribute", "PropertyListingUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TenancyType", "TenancyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.PropertyListingAttribute", "TenancyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyAttribute");

                    b.Navigation("PropertyListing");

                    b.Navigation("TenancyType");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyRenting", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithMany("Rentings")
                        .HasForeignKey("PropertyListingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyListing");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyReview", b =>
                {
                    b.HasOne("DataAccess.Entities.Property", null)
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyViewing", b =>
                {
                    b.HasOne("DataAccess.Entities.PropertyListing", "PropertyListing")
                        .WithMany("Viewings")
                        .HasForeignKey("PropertyListingUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithMany("Viewings")
                        .HasForeignKey("TenantUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyListing");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.StudentProfile", b =>
                {
                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.StudentProfile", "TenantUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.University", "University")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.StudentProfile", "UniversityUID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("University");
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "CountryUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.TenancyType", "TenancyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "TenancyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.Tenant", "UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TenancyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.TenantPreference", b =>
                {
                    b.HasOne("DataAccess.Entities.FurnishType", "FurnishType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "FurnishTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.PropertyType", "PropertyType")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "PropertyTypeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Tenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.TenantPreference", "TenantUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FurnishType");

                    b.Navigation("PropertyType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DataAccess.Entities.University", b =>
                {
                    b.HasOne("DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.Property", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Listings");

                    b.Navigation("PropertyAttribute")
                        .IsRequired();

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DataAccess.Entities.PropertyListing", b =>
                {
                    b.Navigation("PropertyListingAttribute")
                        .IsRequired();

                    b.Navigation("Rentings");

                    b.Navigation("Viewings");
                });

            modelBuilder.Entity("DataAccess.Entities.Tenant", b =>
                {
                    b.Navigation("Viewings");
                });
#pragma warning restore 612, 618
        }
    }
}
